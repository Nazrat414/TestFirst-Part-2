
describe('threeSecondsLater', function() {
  var value = 0;
  var threelater;

  beforeEach(function(done) {
    time = Date.now()
    twoSecondsLater(function() {
      value += 5;
      threelater = Date.now()
      done();
    })
  })

  it('runs func passed in', function() {
    expect(value).toEqual(5);
  })

  it('takes 3 seconds', function() {
    var diff = (threelater - time)/1000;
    expect(Math.floor(diff)).toEqual(2);
  })
})

describe('dataLookUp', function() {
  var myData;

  var dummyData = {
    numberOfPeopleCurrentlyInSpace: 6
  }

  function getPeopleInSpace(cb) {
    setTimeout(function() {
      cb(null, dummyData);
    },500)
  }

  beforeEach(function(done) {
    dataLookUp(getPeopleInSpace, function(err, data) {
      myData = data;
      done();
    })
  }) 

  xit('invokes the async function getPeopleInSpace', function() {
    //should be easy but I can't figure out a way to do this. the spies
    //seem to keep done from being called.
  })

  it('extracts the number of people in space, and sets the number to data', function() {
    expect(myData).toEqual(6);
  })

});

describe('asyncEach', function() {

  var arr = [100, 200, 300, 50, 10, 150];
  var total, count;

  //We may want to change this to objects
  var asyncFunc = function(elem, callback) { 
    if(elem < 0) {
      var err = {message: 'Number must be greater than 0'};
      callback(err, null);
    } else {
      setTimeout(function() {
        callback(null, elem); //doubles the elements value
      }, elem); //setTimeout runs based on the element
    }
  };

  beforeEach(function(done) {
    total = 0;
    count = 0;

    asyncEach(arr, asyncFunc, function(err, result) {
      total += result;
      if(count++ === arr.length-1) done();
    });
  })

  it('Runs the callback for the result of each async call for each element in the array', function() {
    expect(total).toEqual(810);
  })

  it('throws an error if the async function generates an error', function(done) {
    var arrShouldGenerateErr = [100, -40, 300, -50, 10, 150];
    var runCount = 0, errCount = 0;
    asyncEach(arrShouldGenerateErr, asyncFunc, function(err, result) {
      if(err) errCount++;
      if(runCount++ === arrShouldGenerateErr.length-1) {
        expect(errCount).toEqual(2);
        done();
      }
    })
  });
    
})

describe('asyncMap', function() {
  var myValue;

  var asyncFunc = function(elem, callback) { 
    if(elem < 0) {
      var err = {message: 'Number must be greater than 0'};
      callback(err, null);
    } else {
      setTimeout(function() {
        callback(null, elem*2); //doubles the elements value
      }, elem); //setTimeout runs based on the element
    }
  };

  var arr = [100, 200, 300, 50, 10, 150];

  beforeEach(function(done) {
    asyncMap(arr, asyncFunc, function(err, result) {
      myValue = result;
      done();
    })
  })

  it('creates an array of the mapped values generated by the async function, and passes that array into the given callback', function() {
    expect(myValue.length).toEqual(6);
  })

  it('the array is in the order that each async call finishes, and each element has doubled', function() {
    expect(myValue).toEqual([20, 100, 200, 300, 400, 600]);
  })

  it('throws an error if the async function generates an error', function(done) {
    var arrShouldGenerateErr = [100, -40, 300, 50, 10, 150];
    asyncMap(arrShouldGenerateErr, asyncFunc, function(err, result) {
      expect(err.message).toEqual('Number must be greater than 0');
      done();
    })
  });
  
})



// describe('thunking pattern', function() {

// })



